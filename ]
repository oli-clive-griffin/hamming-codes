import numpy as np
import operator as op
from math import log2
from functools import reduce
from random import randrange
from sys import argv
import math


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    YELLOW_BG = "\033[30;103m"


def generate_bits():
    bits = np.random.randint(0, 2, DIMENSION)
    bits[0] = 0 
    return bits


def xor(bits):
    return reduce(op.xor, [i for i, bit in enumerate(bits) if bit])


def prepare_bits(bits):
    parity_position = xor(bits)
    
    #4 hard coded for now
    for i in reversed([2**x for x in range(int(log2(DIMENSION)))]):
        if parity_position >= i:
            bits[i] = not bits[i]
            parity_position = parity_position - i   

    return bits


def random_bit_flip(bits):
    i = randrange(0, len(bits))
    bits[i] = not bits[i]
    return i, bits


def check_properly_prepared(bits):
    if (xor(bits) == 0):
        return True
    return False


def repair_bits(bits):
    flipped_bit = xor(bits)
    bits[flipped_bit] = not bits[flipped_bit]
    return bits


# TODO make into a comprehension
def print_bits(bits, flat=False, bit_flipped=None, display_width=None ):

    if flat:
        print([bit for i, bit in enumerate(bits)])
    else:
        for i, bit in enumerate(bits):
            if i == bit_flipped:
                print(f"{bcolors.RED}{bit}{bcolors.ENDC}", end=" ")
            elif i in [2**x for x in range(math.ceil(log2(DIMENSION)))]:
                print(f"{bcolors.OKBLUE}{bit}{bcolors.ENDC}", end=" ")
            else:
                print(bit, end=" ")

            if i % display_width == display_width - 1:
                print("")

    print("\n\n")


def add_padding(bits):
    length = len(bits)
    dead_space = 0 
    for i in [2**x for x in range(13)]:
        if i >= length:
            dead_space = i - length
            break
    bits += [0 for i in range(dead_space)]
    return bits



if __name__ == '__main__':

    if len(argv) > 1:
        DIMENSION = int(argv[1])
    else:
        DIMENSION = 64

    DISPLAY_WIDTH = math.ceil(log2(DIMENSION))



    bits = generate_bits()
    bits = add_padding(bits) 
    print("\n")
    print(f"{bcolors.OKCYAN}Initial bits: {bcolors.ENDC}")
    print_bits(bits, display_width=DISPLAY_WIDTH)

    bits = prepare_bits(bits)
    INITIAL_BITS = bits 
    print(f"{bcolors.OKCYAN}Prepared bits: {bcolors.ENDC}")
    print_bits(bits, display_width=DISPLAY_WIDTH)

    if not check_properly_prepared(bits):
        raise NameError("Preparing failed")
    
    bit_flipped, bits = random_bit_flip(bits)
    print(f"{bcolors.OKCYAN}Bit {bit_flipped} flipped {bcolors.ENDC}")
    print_bits(bits, display_width=DISPLAY_WIDTH, bit_flipped=bit_flipped)
    
    bits = repair_bits(bits)
    print(f"{bcolors.OKCYAN}Repaired bits: {bcolors.ENDC}")
    print_bits(bits, display_width=DISPLAY_WIDTH,)
    

    if (np.allclose(bits, INITIAL_BITS)):
        print(bcolors.OKGREEN + "Message successfully repaired" + bcolors.ENDC)
    else:
        print(bcolors.RED + "Message could not be repaired" + bcolors.ENDC)

